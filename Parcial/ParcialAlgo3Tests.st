TestCase subclass: #MotoDeCarreraTest	instanceVariableNames: ''	classVariableNames: ''	package: 'ParcialAlgo3Tests'!!MotoDeCarreraTest methodsFor: 'tests' stamp: 's 6/30/2020 21:02'!test02MotoDeCarreraAveriadaNoPuedeAvanzar	| unaMoto |		unaMoto := MotoDeCarrera new.	unaMoto romperVehiculo.		self should:[				unaMoto cantidadDeKMRecorridosEnHoras: 2.			]raise: VehiculoAveriadoError.! !!MotoDeCarreraTest methodsFor: 'tests' stamp: 's 6/30/2020 21:05'!test03UnaMotoDeCarreraRecorre720KmEn3Hora	|unaMoto kmRecorridos|		unaMoto:= MotoDeCarrera  new.	kmRecorridos:= unaMoto cantidadDeKMRecorridosEnHoras:3.	self assert: kmRecorridos equals: 720! !!MotoDeCarreraTest methodsFor: 'tests' stamp: 's 6/30/2020 20:53'!test01UnaMotoDeCarreraRecorre240KmPorHora	|unaMoto kmRecorridos|		unaMoto:= MotoDeCarrera  new.	kmRecorridos:= unaMoto cantidadDeKMRecorridosEnHoras:1.	self assert: kmRecorridos equals: 240! !TestCase subclass: #MotonetaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'ParcialAlgo3Tests'!!MotonetaTest methodsFor: 'tests' stamp: 's 6/30/2020 20:53'!test02MotonetaAveriadaNoPuedeAvanzar"Prueba Negativa: Cuando el vehiculo esta roto, no puede avanzar porque esta averiadoEntonces deberia lanzar una excepcion"			| unaMotoneta |		unaMotoneta := Motoneta new.	unaMotoneta romperVehiculo.		self should:[		unaMotoneta cantidadDeKMRecorridosEnHoras: 2.		]raise: VehiculoAveriadoError.! !!MotonetaTest methodsFor: 'tests' stamp: 's 6/30/2020 21:06'!testMotonetaAvanza80kmEnDosHs"Prueba otorgada por la catedra"	| unaMotoneta  cantKmAvanzados|		unaMotoneta := Motoneta new.	cantKmAvanzados:=  unaMotoneta cantidadDeKMRecorridosEnHoras: 2.		self assert: cantKmAvanzados equals: 80! !!MotonetaTest methodsFor: 'tests' stamp: 's 6/30/2020 21:06'!test01MotonetaAvanza40kmPorHs	| unaMotoneta  cantKmAvanzados|		unaMotoneta := Motoneta new.	cantKmAvanzados:=  unaMotoneta cantidadDeKMRecorridosEnHoras: 1.		self assert: cantKmAvanzados equals: 40! !